// adminController.js
const passport = require('passport');
const SystemAnnouncement = require('../models/SystemAnnouncements');
const User = require('../models/User');
const marked = require('marked');
const multer = require('multer');
const path = require('path');
const { sendEmail } = require("../../emailService");
const moment = require('moment');
const crypto = require('crypto');
const mongoose = require('mongoose');
const UserActivity = require('../models/UserActivity');
const FeatureUsage = require('../models/FeatureUsage');
const Complaint = require('../models/Complaint');
const os = require('os');
const osUtils = require('os-utils');
const process = require('process');

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, path.join(__dirname, '../../public/img/profileImage')); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({ storage: storage });

exports.adminDashboard = async (req, res, next) => {
    try {
        const nonce = crypto.randomBytes(16).toString('base64');
res.setHeader('Content-Security-Policy', `script-src 'self' https://cdn.jsdelivr.net 'nonce-${nonce}'`);

        const totalUsers = await User.countDocuments({ role: 'user' });

        const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);
        const onlineUsers = await User.countDocuments({ role: 'user', lastActive: { $gte: fiveMinutesAgo } });

        // üü¢ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
        const activities = await UserActivity.aggregate([
            { $group: { _id: "$action", count: { $sum: 1 } } },
            { $sort: { count: -1 } },
        ]);

        const totalActivityCount = activities.reduce((sum, activity) => sum + activity.count, 0);
        const popularActivities = activities.map(activity => ({
            name: activity._id,
            count: activity.count,
            percentage: ((activity.count / totalActivityCount) * 100).toFixed(2)
        }));

        // üü¢ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
        const featureUsage = await FeatureUsage.aggregate([
            { $group: { _id: "$featureName", count: { $sum: 1 } } },
            { $sort: { count: -1 } }
        ]);

        const featureUsageStats = featureUsage.map(feature => ({
            featureName: feature._id,
            count: feature.count
        }));

        // üü¢ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CPU ‡πÅ‡∏•‡∏∞ Memory ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (CPU ‡πÄ‡∏õ‡πá‡∏ô %)
        const loadAverage = os.loadavg()[0]; // Load Average (1 ‡∏ô‡∏≤‡∏ó‡∏µ)
        const cpuCores = os.cpus().length;   // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Core ‡∏Ç‡∏≠‡∏á CPU
        const cpuUsagePercent = (loadAverage / cpuCores) * 100;  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô %

        const memoryUsage = (process.memoryUsage().rss / os.totalmem()) * 100; // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
        const uptime = (process.uptime() / 60).toFixed(2); // uptime ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ

        // üü¢ ‡∏î‡∏∂‡∏á Response Time
        const start = process.hrtime();
        setTimeout(() => {
            const diff = process.hrtime(start);
            const responseTime = (diff[0] * 1e3 + diff[1] / 1e6).toFixed(2);


            res.render('admin/Dashboard_admin', {
                nonce,
                title: 'Admin Dashboard',
                user: req.user,
                totalUsers,
                onlineUsers,
                popularActivities: popularActivities || [], // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á
                featureUsageStats: featureUsageStats || [], // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á
                cpuUsage: cpuUsagePercent.toFixed(1) + '%',
                memoryUsage: memoryUsage.toFixed(2),
                uptime,
                responseTime,
                layout: "../views/layouts/adminPage",
            });
            
        }, 100);
    } catch (err) {
        console.error('Error loading admin dashboard:', err);
        next(err);
    }
};

exports.getServerStatus = (req, res) => {
    osUtils.cpuUsage(cpuPercent => {
        res.json({
            cpuUsage: (cpuPercent * 100).toFixed(2),
            memoryUsage: ((1 - os.freemem() / os.totalmem()) * 100).toFixed(2),
            uptime: os.uptime(),
            responseTime: process.uptime().toFixed(2)
        });
    });
};

exports.SystemAnnouncements = async (req, res, next) => {
    try {
        const now = new Date();
        const announcements = await SystemAnnouncement.find({ expirationDate: { $gte: now }, isDeleted: false })
            .populate({
                path: 'createdBy',
                select: 'username role',
                match: { role: 'admin' }
            })
            .sort({ createdAt: -1 });

        const userCounts = await User.countDocuments({
            role: 'user',
            "preferences.notifications.email": true
        });

        res.render('admin/SystemAnnouncements_admin', {
            title: 'System Announcements',
            user: req.user,
            announcements,
            userCounts,
            layout: "../views/layouts/adminPage"
        });
    } catch (error) {
        console.error('Error fetching announcements:', error);
        req.flash('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ');
        res.redirect('/admin/adminPage');
    }
};

exports.pageaddAnnouncements = (req, res, next) => {
    res.render('admin/SystemAnnouncements_admin/addSystemAnnouncements', {
        title: 'Admin Page',
        user: req.user,
        layout: "../views/layouts/adminPage"
    });
};

exports.createAnnouncements = async (req, res, next) => {
    try {
        const { title, content, expirationDate } = req.body;

        const users = await User.find({
            role: 'user',
            "preferences.notifications.email": true
        }).select('googleEmail _id');

        const emailAddresses = users.map(user => user.googleEmail);
        const recipients = users.map(user => user._id);

        const newAnnouncement = new SystemAnnouncement({
            createdBy: req.user._id,
            title,
            content,
            expirationDate,
            targetAudience: 'user',
            recipients,
        });

        await newAnnouncement.save();
        console.log('‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', newAnnouncement);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ role ‡πÄ‡∏õ‡πá‡∏ô 'user'
        const allUsers = await User.find({ role: 'user' }); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πá‡∏ô allUsers
        const notificationPromises = allUsers.map(async (user) => {
            const notification = new Notification({
                user: user._id,
                type: 'announcement',
                announcement: newAnnouncement._id,
                leader: req.user._id,
                status: 'accepted',
            });
            try {
                await notification.save();
            } catch (err) {
                console.error(err);
            }
        });

        await Promise.all(notificationPromises);

        if (emailAddresses.length > 0) {
            const emailSubject = `‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡∏°‡πà: ${title}`;

            // ‡πÅ‡∏õ‡∏•‡∏á content ‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
            const emailBody = `
                <h1>${title}</h1>
                <p>${marked.parse(content)}</p> 
                <p>‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${new Date(expirationDate).toLocaleDateString()}</p>
            `;

            const emailPromises = emailAddresses.map(email =>
                sendEmail(email, emailSubject, emailBody)
            );
            await Promise.all(emailPromises);
            console.log('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } else {
            console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
        }

        req.flash('success', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
        res.redirect('/SystemAnnouncements');
    } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®:', error);
        req.flash('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®');
        res.redirect('/SystemAnnouncements/pageaddAnnouncements');
    }
};

exports.sendUnexpiredAnnouncementsToNewUser = async (userEmail) => {
    try {
        const activeAnnouncements = await SystemAnnouncement.find({
            expirationDate: { $gte: new Date() },
            isDeleted: false
        });

        if (activeAnnouncements.length > 0) {
            const emailPromises = activeAnnouncements.map(announcement => {
                const emailSubject = `‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${announcement.title}`;

                // ‡πÅ‡∏õ‡∏•‡∏á content ‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ announcement.content)
                const emailBody = `
                    <!DOCTYPE html>
                    <html>
                    <head>
                      <style>
                        body {
                          font-family: sans-serif;
                        }
                        .content-preview {
                          height: 350px;
                          overflow-y: scroll;
                          padding: 10px;
                          font-size: 16px;
                          color: #555;
                          line-height: 1.6;
                          border-radius: 10px;
                        }
                      </style>
                    </head>
                    <body>
                      <h1>${announcement.title}</h1> 
                      <p>${marked.parse(announcement.content)}</p> 
                      <p>‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${new Date(announcement.expirationDate).toLocaleDateString()}</p>
                    </body>
                    </html>
                `;
                return sendEmail(userEmail, emailSubject, emailBody);
            });

            const results = await Promise.allSettled(emailPromises);
            console.log('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà:', userEmail);
        } else {
            console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà');
        }

    } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•:', error);
    }
};

exports.deleteAnnouncement = async (req, res) => {
    try {
        const { id } = req.params;
        const result = await SystemAnnouncement.findByIdAndUpdate(
            id,
            { isDeleted: true, updatedAt: new Date() },
            { new: true }
        );
        if (!result) {
            return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡πâ' });
        }
        res.json({ success: true, message: '‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
    } catch (error) {
        console.error('Error deleting announcement:', error);
        res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®' });
    }
};

exports.historySystemAnnouncements = async (req, res, next) => {
    try {
        const { searchTerm } = req.query; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ searchTerm ‡∏à‡∏≤‡∏Å query parameter

        let filter = { isDeleted: true }; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö

        if (searchTerm) { // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ searchTerm ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° filter
            filter.title = { $regex: searchTerm, $options: 'i' };
        }

        const deletedAnnouncements = await SystemAnnouncement.find(filter) // ‡πÄ‡∏û‡∏¥‡πà‡∏° filter ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            .populate({
                path: 'createdBy',
                select: 'username role',
                match: { role: 'admin' }
            })
            .sort({ updatedAt: -1 });

        res.render('admin/SystemAnnouncements_admin/historySystemAnnouncements', {
            title: 'History of Deleted Announcements',
            user: req.user,
            deletedAnnouncements,
            layout: "../views/layouts/adminPage"
        });
    } catch (err) {
        console.error(err);
        res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
}

exports.ReportUserProblem = async (req, res, next) => {
    try {
        const complaints = await Complaint.find({ status: { $ne: 'Closed' } }).populate('userId').sort({ submittedAt: -1 });
        res.render('admin/ReportUserProblem_admin', {
            title: 'Report a user problem',
            user: req.user,
            complaints: complaints,
            layout: '../views/layouts/adminPage'
        });
    } catch (err) {
        console.error(err);
        res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
};

exports.updateReportUserProblem = async (req, res, next) => {
    try {
        const complaintId = req.params.id; // ‡∏£‡∏±‡∏ö id ‡∏à‡∏≤‡∏Å URL parameter
        const complaint = await Complaint.findById(complaintId).populate('userId');

        if (!complaint) {
            return res.status(404).send('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
        }

        res.render('admin/ReportUserProblem_admin/updateReportUserProblem', {
            title: 'Update Report User Problem',
            user: req.user,
            complaint: complaint, // ‡∏™‡πà‡∏á complaint ‡πÑ‡∏õ‡∏¢‡∏±‡∏á template
            layout: '../views/layouts/adminPage'
        });
    } catch (err) {
        console.error(err);
        res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
};

exports.ClosedReportUserProblem = async (req, res, next) => {
    try {
        const closedComplaints = await Complaint.find({ status: 'Closed' }).populate('userId').sort({ resolvedAt: -1 });
        res.render('admin/ReportUserProblem_admin/closeReportUserProblem', {
            title: 'Closed Report User Problem',
            user: req.user,
            closedComplaints: closedComplaints, // <-- Make sure this is here
            layout: '../views/layouts/adminPage'
        });
    } catch (err) {
        console.error(err);
        res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
};

exports.SettingAdmin = (req, res, next) => {
    res.render('admin/SettingAdmin_admin', {
        title: 'Setting Adminstator',
        user: req.user,
        layout: '../views/layouts/adminPage'
    });
};

exports.updateProfileImage = [
    upload.single('profileImage'), // ‡πÉ‡∏ä‡πâ middleware upload.single()
    async (req, res, next) => {
        try {
            if (req.file) {
                const updatedUser = await User.findByIdAndUpdate(
                    req.user._id,
                    { profileImage: '/img/profileImage/' + req.file.filename }, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
                    { new: true }
                );
                if (updatedUser) {
                    req.flash('success', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    res.redirect('/SettingAdmin');
                } else {
                    req.flash('error', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    res.redirect('/SettingAdmin');
                }
            } else {
                req.flash('error', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
                res.redirect('/SettingAdmin');
            }
        } catch (error) {
            console.error('Error updating profile image:', error);
            req.flash('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
            res.redirect('/SettingAdmin');
        }
    }
];

exports.changePassword = async (req, res, next) => {
    const { currentPassword, newPassword } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£) 
    if (newPassword.length < 8) {
        return res.status(400).json({ success: false, message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' });
    }

    try {
        // ‡πÉ‡∏ä‡πâ passport ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 
        await new Promise((resolve, reject) => {
            req.user.changePassword(currentPassword, newPassword, (err, user) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(user);
                }
            });
        });

        res.json({ success: true, message: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (error) {
        console.error('Error changing password:', error);
        res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
    }
};

exports.getLoginHistory = async (req, res, next) => {
    try {
        const adminUser = await User.findById(req.user._id).select('lastLogin lastActive');
        if (!adminUser) {
            return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' });
        }

        res.json({
            success: true,
            data: {
                lastLogin: adminUser.lastLogin,
                lastActive: adminUser.lastActive,
            },
        });
    } catch (error) {
        console.error('Error fetching login history:', error);
        res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' });
    }
};

exports.UserAccountManagement = async (req, res, next) => {
    try {
        const users = await User.find({ role: { $ne: 'admin' } }); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin
        res.render('admin/UserAccountManagement_admin.ejs', {
            title: 'User Account Management Adminstator',
            user: req.user,
            users: users,
            layout: '../views/layouts/adminPage'
        });
    } catch (err) {
        console.error(err);
        res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
exports.updateusersmanage = async (req, res) => {
    try {
        console.log("Request body:", req.body);
        const { userId, newUsername } = req.body;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ userId ‡πÅ‡∏•‡∏∞ newUsername ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!userId || !newUsername) {
            return res.status(400).json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
        }

        const updatedUser = await User.findByIdAndUpdate(
            userId,
            { username: newUsername },
            { new: true }
        );

        if (updatedUser) {
            res.json({ success: true, message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
        } else {
            res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î...' });
    }
};

exports.deleteUser = async (req, res) => {
    try {
        const userId = req.params.id;
        console.log("Soft Deleting User ID:", userId);

        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ success: false, message: "User not found" });
        }

        // ‡∏ó‡∏≥ Soft Delete ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï isDeleted ‡πÄ‡∏õ‡πá‡∏ô true ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö
        user.isDeleted = true;
        user.deletedAt = new Date();
        await user.save();

        res.json({ success: true, message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Soft Delete)" });
    } catch (error) {
        console.error("Error soft deleting user:", error);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }
};

exports.resetPassword = async (req, res) => {
    try {
        const userId = req.params.id;
        const user = await User.findById(userId);

        if (!user) {
            return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
        }

        const resetToken = crypto.randomBytes(20).toString('hex');
        const resetTokenExpiration = Date.now() + 86400000; // 1 day

        user.resetToken = resetToken;
        user.resetTokenExpiration = resetTokenExpiration;

        // Save the user using async/await
        await user.save();

        const resetPasswordUrl = `${req.protocol}://${req.get('host')}/reset-password-new-get?token=${resetToken}`;
        const emailSubject = '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô';
        const emailBody = `
            <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user.username},</p>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:</p>
            <a href="${resetPasswordUrl}">‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</a>
            <p>‡∏•‡∏¥‡πâ‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏∞‡∏≠‡∏¢‡πà‡∏π‡πÑ‡∏î‡πâ 1 ‡∏ß‡∏±‡∏ô</p>
        `;

        await sendEmail(user.googleEmail, emailSubject, emailBody);
        res.json({ success: true, message: '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (err) {
        console.error('Error resetting password:', err);
        res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î...' });
    }
};


exports.showResetPasswordNew = (req, res) => {
    const token = req.query.token;
    res.render('admin/UserAccountManagement_admin/reset-password-new.ejs', {
        title: 'Reset Password',
        user: req.user,
        token: token,
        layout: "../views/layouts/resetpassUser"
    });
};

exports.resetPasswordNew = async (req, res) => {
    try {
        const { token, newPassword, confirmPassword } = req.body;

        if (newPassword !== confirmPassword) {
            req.flash('error', '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
            return res.redirect(`/reset-password-new-get?token=${token}`);
        }

        const user = await User.findOne({
            resetToken: token,
            resetTokenExpiration: { $gt: Date.now() }
        });

        if (!user) {
            console.log('error', 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏');
            req.flash('error', 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏');
            return res.redirect('/login');
        }

        // Use the setPassword method with async/await
        await new Promise((resolve, reject) => {
            user.setPassword(newPassword, (err, updatedUser) => {
                if (err) {
                    return reject(err);
                }
                user.resetToken = undefined;
                user.resetTokenExpiration = undefined;
                resolve(updatedUser);
            });
        });

        await user.save(); // Save the user with updated details

        console.log('User saved successfully.');
        req.flash('success', '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        res.redirect('/login');
    } catch (err) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:', err);
        req.flash('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
        res.redirect('/login');
    }
};

exports.logout = (req, res) => {
    req.logout((err) => {
        if (err) {
            console.error(err);
            return res.status(500).send("Error logging out");
        }
        req.session.destroy((error) => {
            if (error) {
                console.error(error);
                return res.status(500).send("Error logging out");
            }
            res.redirect("/");
        });
    });
};


